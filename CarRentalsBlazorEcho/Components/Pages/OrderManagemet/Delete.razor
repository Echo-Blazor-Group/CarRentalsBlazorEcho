@page "/OrderManagement/Delete/{orderId:int}"
@using CarRentalsBlazorEcho.Data
@using CarRentalsBlazorEcho.Models
@inject IUser UserRepository
@inject IOrder OrderRepository
@inject ICar CarRepository
@inject NavigationManager NavigationManager

<h4>Cancel This Order?</h4>

@if (order != null)
{
    <p>Ordernr:    @order.OrderId</p>
    <p>Date:       @order.StartDate.ToString("dd/MM/yyyy") - @order.EndDate.ToString("dd/MM/yyyy")</p>

    <h4>Customer</h4>

    <p>Customernr: @user.UserId</p>
    <p>Name:       @user.FullName</p>
    <p>Email:      @user.Email</p>

    <h4>Car</h4>

    <p>Carnr:      @car.CarId</p>
    <p>Brand:      @car.Brand</p>
    <p>Model:      @car.Model</p>
}
else
{
    <p>Loading...</p>
}
<button class="btn btn-primary" @onclick="DeleteOrder">Delete</button>
<button class="btn btn-primary" @onclick="Return">Return</button>

@code {
    private User user;
    private Car car;
    public Order order;

    [Parameter]
    public int orderId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        order = await OrderRepository.GetByIdAsync(orderId);
        user = await UserRepository.GetByIdAsync(order.UserId);
        car = await CarRepository.GetByIdAsync(order.CarId);
    }

    private void Return()
    {
        NavigationManager.NavigateTo("/Orders");
    }

    private async Task DeleteOrder()
    {
        await OrderRepository.DeleteAsync(order);
        NavigationManager.NavigateTo("/Orders");
    }
}