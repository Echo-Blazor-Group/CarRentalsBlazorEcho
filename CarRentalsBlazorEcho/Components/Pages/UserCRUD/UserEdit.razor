@page "/UserEdit/{UserId}"
@using CarRentalsBlazorEcho.Models
@using CarRentalsBlazorEcho.Data
@inject IUser _userRep
@inject NavigationManager NavigationManager

<h3>UserEdit</h3>

@if (user != null)
{
    <form @onsubmit="UpdateUser">
        <div>
            <label for="FirstName">FirstName:</label>
            <input type="text" id="FirstName" @bind="user.FirstName" required />
        </div>
        <div>
            <label for="LastName">LastName:</label>
            <input type="text" id="LastName" @bind="user.LastName" required />
        </div>
        <div>
            <label for="Email">Email:</label>
            <input type="text" id="Email" @bind="user.Email" required />
        </div>
        <div>
            <label for="Password">Password:</label>
            <input type="text" id="Password" @bind="user.Password" required />
        </div>
        <div>
            <label for="Role">Role:</label>
            <input type="text" id="Role" @bind="user.Role" required />
        </div>
        <button type="submit">Update</button>
    </form>
}
else
{
    <p>Loading...</p>
}
<button class="btn btn-outline-primary" @onclick="NavigateReturn">Return To List</button>

@code {
    User user;

    [Parameter]
    public string UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(UserId) && int.TryParse(UserId, out int id))
        {
             user = await _userRep.GetByIdAsync(id);
        }
    }
    private async Task UpdateUser()
    {
         await _userRep.UpdateAsync(user);
        NavigationManager.NavigateTo("/Users");
    }

    private void NavigateReturn()
    {
        NavigationManager.NavigateTo($"/Users");
    }
}