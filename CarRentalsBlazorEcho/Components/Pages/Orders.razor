@page "/Orders"
@using CarRentalsBlazorEcho.Data
@using CarRentalsBlazorEcho.Models
@inject IOrder OrderRepository
@inject ICar CarRepository
@inject IUser UserRepository
@inject ICarPicture CarPicturesRepository
@inject NavigationManager NavigationManager

@if (CurrentUser.IsAdmin)
{
    <h3>Orders</h3>
}
else
{
    <h3>My Orders</h3>
}
<div>
    <label for="startDate">Start Date:</label>
    <input type="date" id="startDate" @bind="startDate" />

    <label for="endDate">-</label>
    <input type="date" id="endDate" @bind="endDate" />

    <button @onclick="FilterOrders">Filter</button>
    <button @onclick="LoadOrders">Clear Filter</button>
</div>

@if (CurrentUser.IsAdmin)
{
    <table class="table long">
        <thead>
            <tr>
                <th></th>
                <th>Car</th>
                <th>Customer</th>
                <th>StartDate</th>
                <th>EndDate</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in filteredOrders)
            {
                <tr>
                    <td>
                        <button style="border: none; padding: 0;" @onclick="() => OrderDetails(item.OrderId)">
                            <img src=@carPictures.FirstOrDefault(p=>p.CarId==item.CarId).PictureUrl height="100px" />
                        </button>
                    </td>
                    <td>@GetModel(item.CarId)</td>
                    <td>@GetEmail(item.UserId)</td>
                    <td>@item.StartDate.ToString("dd/MM/yyyy")</td>
                    <td>@item.EndDate.ToString("dd/MM/yyyy")</td>
                    <td>
                        <button @onclick="() => OrderEdit(item.OrderId)">Edit</button>
                        <button @onclick="() => OrderDelete(item.OrderId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <table class="table long">
        <thead>
            <tr>
                <th></th>
                <th>Car</th>
                <th>StartDate</th>
                <th>EndDate</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in filteredOrders.Where(o => o.UserId == currentUserId))
            {
                <tr>
                    <td>
                        <button style="border: none; padding: 0;" @onclick="() => OrderDetails(item.OrderId)">
                            <img src=@carPictures.FirstOrDefault(p=>p.CarId==item.CarId).PictureUrl height="100px" />
                        </button>
                    </td>
                    <td>@GetModel(item.CarId)</td>
                    <td>@item.StartDate.ToString("dd/MM/yyyy")</td>
                    <td>@item.EndDate.ToString("dd/MM/yyyy")</td>
                    <td>
                        <button @onclick="() => OrderDelete(item.OrderId)">Cancel Reservation</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private IEnumerable<Order> orders { get; set; } = new List<Order>();
    private IEnumerable<Order> filteredOrders { get; set; } = new List<Order>();
    private IEnumerable<Car> cars { get; set; } = new List<Car>();
    private IEnumerable<User> users { get; set; } = new List<User>();
    private IEnumerable<CarPicture> carPictures { get; set; } = new List<CarPicture>();

    private int currentUserId;
    private DateTime startDate;
    private DateTime endDate;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();

        var _cars = await CarRepository.GetAllAsync().ConfigureAwait(false);
        cars = _cars.ToList();
        var _users = await UserRepository.GetAllAsync().ConfigureAwait(false);
        users = _users.ToList();
        var _carPictures = await CarPicturesRepository.GetAllAsync().ConfigureAwait(false);
        carPictures = _carPictures.ToList();

        currentUserId = GetUserId(CurrentUser.Email);

        startDate = DateTime.Now.Date;
        endDate = DateTime.Now.Date.AddDays(6);
    }

    private async Task LoadOrders()
    {
        var _orders = await OrderRepository.GetAllAsync().ConfigureAwait(false);
        orders = _orders.ToList();
        filteredOrders = orders;
    }

    private void FilterOrders()
    {
        filteredOrders = orders
            .Where(o => o.StartDate >= startDate && o.StartDate <= endDate)
            .ToList();
    }

    private string GetEmail(int id)
    {
        User? user = users.FirstOrDefault(u => u.UserId == id);

        if(user != null)
        {
            return user.Email; 
        }
        else
        {
            return "-user not found-";
        }

    }

    private string GetModel(int id)
    {
        Car? car = cars.FirstOrDefault(c => c.CarId == id);

        if (car != null)
        {
            return car?.Brand + " " + car?.Model;
        }
        else
        {
            return "-car not found-";
        }
    }

    private int GetUserId(string email)
    {
        if (users != null)
        {
            User? user = users.FirstOrDefault(u => u.Email == email);

            if (user != null)
            {
                return user.UserId;
            }
            else
            {
                return -1;
            }
        }
        else
        {
            return -1;
        }
    }

    private void OrderDetails(int id)
    {
        NavigationManager.NavigateTo($"OrderManagement/Details/{id}");
    }

    private void OrderEdit(int id)
    {
        NavigationManager.NavigateTo($"OrderManagement/Delete/{id}");
    }

    private void OrderDelete(int id)
    {
        NavigationManager.NavigateTo($"OrderManagement/Delete/{id}");
    }
}
