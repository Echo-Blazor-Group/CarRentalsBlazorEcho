@page "/Orders"
@using CarRentalsBlazorEcho.Data
@using CarRentalsBlazorEcho.Models
@inject IOrder OrderRepository
@inject ICar CarRepository
@inject IUser UserRepository
@inject NavigationManager NavigationManager

<h3>Orders</h3>

<div>
    <label for="startDate">Start Date:</label>
    <input type="date" id="startDate" @bind="startDate" />

    <label for="endDate">-</label>
    <input type="date" id="endDate" @bind="endDate" />

    <button @onclick="FilterOrders">Filter</button>
    <button @onclick="LoadOrders">Clear Filter</button>
</div>


<table class="table long">
    <thead>
        <tr>
            <th>Car</th>
            <th>Customer</th>
            <th>StartDate</th>
            <th>EndDate</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in filteredOrders)
        {
            <tr>
                <td>@GetModel(item.CarId)</td>
                <td>@GetEmail(item.UserId)</td>
                <td>@item.StartDate.ToString("dd/MM/yyyy")</td>
                <td>@item.EndDate.ToString("dd/MM/yyyy")</td>
                <td>
                    @if (CurrentUser.IsAdmin)
                    {
                        <button @onclick="() => OrderDetails(item.OrderId)">Details</button>
                        <button @onclick="() => OrderEdit(item.OrderId)">Edit</button>
                        <button @onclick="() => OrderDelete(item.OrderId)">Delete</button>
                    }
                    else
                    {
                        <button @onclick="() => OrderDetails(item.OrderId)">Details</button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@code {

    private IEnumerable<Order> orders { get; set; } = new List<Order>();
    private IEnumerable<Car> cars { get; set; } = new List<Car>();
    private IEnumerable<User> users { get; set; } = new List<User>();
    private IEnumerable<Order> filteredOrders { get; set; } = new List<Order>();
    private DateTime startDate;
    private DateTime endDate;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();

        var _cars = await CarRepository.GetAllAsync().ConfigureAwait(false);
        cars = _cars.ToList();
        var _users = await UserRepository.GetAllAsync().ConfigureAwait(false);
        users = _users.ToList();

        startDate = DateTime.Now.Date;
        endDate = DateTime.Now.Date.AddDays(6);
    }

    private async Task LoadOrders()
    {
        var _orders = await OrderRepository.GetAllAsync().ConfigureAwait(false);
        orders = _orders.ToList();
        filteredOrders = orders;
    }

    private void FilterOrders()
    {
        filteredOrders = orders
            .Where(o => o.StartDate >= startDate && o.StartDate <= endDate)
            .ToList();
    }

    private string GetEmail(int id)
    {
        User? user = users.FirstOrDefault(u => u.UserId == id);

        if(user != null)
        {
            return user.Email; 
        }
        else
        {
            return "-user not found-";
        }

    }

    private string GetModel(int id)
    {
        Car? car = cars.FirstOrDefault(c => c.CarId == id);

        if (car != null)
        {
            return car?.Brand + " " + car?.Model;
        }
        else
        {
            return "-car not found-";
        }
    }

    private void OrderDetails(int id)
    {
        NavigationManager.NavigateTo($"OrderManagement/Delete/{id}");
    }

    private void OrderEdit(int id)
    {
        NavigationManager.NavigateTo($"OrderManagement/Delete/{id}");
    }

    private void OrderDelete(int id)
    {
        NavigationManager.NavigateTo($"OrderManagement/Delete/{id}");
    }
}
