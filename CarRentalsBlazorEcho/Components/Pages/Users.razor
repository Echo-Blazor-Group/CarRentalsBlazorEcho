@page "/Users"
@using CarRentalsBlazorEcho.Data
@using CarRentalsBlazorEcho.Models
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IUser UserRepository

<h1>Users</h1>
@if (CurrentUser.IsLoggedIn == true)
{
    

}
<table class="table long">
    @if (CurrentUser.IsLoggedIn == true && CurrentUser.IsAdmin != true)
    {
        <thead>
            <tr>
                <th>
                    Customer Id
                </th>
                <th>
                    FirstName
                </th>
                <th>
                    LastName
                </th>
                <th>
                    Email
                </th>
                <th>
                    Password
                </th>
                <th></th>
            </tr>
        </thead>

        <tbody>
            @foreach (var user in user)
            {
                <tr>
                    <td>
                        @user.UserId
                    </td>
                    <td>
                        @user.FirstName
                    </td>
                    <td>
                        @user.LastName
                    </td>
                    <td>
                        @user.Email
                    </td>
                    <td>
                        @user.Password
                    </td>
                    <td>
                        @if (CurrentUser.IsAdmin == true)
                        {
                            <button @onclick="() => UserDetails(user)">Details</button>
                            <button @onclick="() => EditUser(user)">Edit</button>
                            <button @onclick="() => DeleteUser(user)">Delete</button>
                        }
                    </td>
                </tr>
            }

        </tbody>
    }
    <thead>
        <tr>
            <th>
                Customer Id
            </th>
            <th>
                FirstName
            </th>
            <th>
                LastName
            </th>
            <th>
                Email
            </th>
            <th>
                Password
            </th>
            <th></th>
        </tr>
    </thead>

    <tbody>
        @foreach (var user in users)
        {
            <tr>
                <td>
                    @user.UserId
                </td>
                <td>
                    @user.FirstName
                </td>
                <td>
                    @user.LastName
                </td>
                <td>
                    @user.Email
                </td>
                <td>
                    @user.Password
                </td>
                <td>
                    @if (CurrentUser.IsAdmin == true)
                    {
                        <button @onclick="() => UserDetails(user)">Details</button>
                        <button @onclick="() => EditUser(user)">Edit</button>
                        <button @onclick="() => DeleteUser(user)">Delete</button>
                    }
                </td>
            </tr>
        }
        
    </tbody>
</table>

@code {

    private IEnumerable<User> user { get; set; } = new List<User>(); 
    private IEnumerable<User> users { get; set; } = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        if (CurrentUser.IsLoggedIn == true)
        {
            var currentUserId = CurrentUser.User.UserId;
            var userId = await UserRepository.GetByIdAsync(currentUserId);
        }
        else
        {
            users = await UserRepository.GetAllAsync();
        }
    }

    private void EditUser(User users)
    {
        NavigationManager.NavigateTo($"/UserEdit/{users.UserId}");
    }
    private void UserDetails(User users)
    {
        NavigationManager.NavigateTo($"/UserDetails/{users.UserId}");
    }
    private async Task DeleteUser(User user)
    {
        var confirmed = await ShowDeleteConfirmationDialog("Are you sure you want to delete this user?");
        if (confirmed)
        {
            await UserRepository.DeleteAsync(user);
            await OnInitializedAsync();
        }
    }
    private async Task<bool> ShowDeleteConfirmationDialog(string message)
    {
        return await JSRuntime.InvokeAsync<bool>("confirm", message);
    }

}