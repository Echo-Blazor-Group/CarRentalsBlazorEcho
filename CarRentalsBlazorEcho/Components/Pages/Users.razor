@page "/Users"
@using CarRentalsBlazorEcho.Data
@using CarRentalsBlazorEcho.Models
@using CarRentalsBlazorEcho.Components
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IUser UserRepository



@if (CurrentUser.IsLoggedIn == true && CurrentUser.IsAdmin == true)
{
    <h1>Users</h1>
    <table class="table long">
        <thead>
            <tr>
                <th>
                    Customer Id
                </th>
                <th>
                    FirstName
                </th>
                <th>
                    LastName
                </th>
                <th>
                    Email
                </th>
                <th>
                    Password
                </th>
                <th></th>
            </tr>
        </thead>

        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>
                        @user.UserId
                    </td>
                    <td>
                        @user.FirstName
                    </td>
                    <td>
                        @user.LastName
                    </td>
                    <td>
                        @user.Email
                    </td>
                    <td>
                        @user.Password
                    </td>
                    <td>
                        @if (CurrentUser.IsAdmin == true)
                        {
                            <button @onclick="() => UserDetails(user)">Details</button>
                            <button @onclick="() => EditUser(user)">Edit</button>
                            <button @onclick="() => DeleteUser(user)">Delete</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (CurrentUser.IsLoggedIn == true && CurrentUser.IsAdmin != true)
{
    <h1>User</h1>
    <table class="table long">
        <thead>
            <tr>
                <th>
                    Customer Id
                </th>
                <th>
                    FirstName
                </th>
                <th>
                    LastName
                </th>
                <th>
                    Email
                </th>
                <th>
                    Password
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in user)
            {
                <tr>
                    <td>
                        @user.UserId
                    </td>
                    <td>
                        @user.FirstName
                    </td>
                    <td>
                        @user.LastName
                    </td>
                    <td>
                        @user.Email
                    </td>
                    <td>
                        @user.Password
                    </td>
                    <td>
                        @if (CurrentUser.IsAdmin == true)
                        {
                            <button @onclick="() => UserDetails(user)">Details</button>
                            <button @onclick="() => EditUser(user)">Edit</button>
                            <button @onclick="() => DeleteUser(user)">Delete</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<User> users { get; set; } = new List<User>();
    public IEnumerable<User> user { get; set; } = new List<User>();
    private int currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var currentUserId = GetUserId(CurrentUser.Email);
        users = await UserRepository.GetAllAsync();
        if (CurrentUser.IsLoggedIn == true)
        {
            user = users;
            user.Where(u => u.UserId == currentUserId);
        }
    }
    private int GetUserId(string email)
    {
        if (users != null)
        {
            User? user = users.FirstOrDefault(u => u.Email == email);

            if (user != null)
            {
                return user.UserId;
            }
            else
            {
                return -1;
            }
        }
        else
        {
            return -1;
        }
    }
    private void EditUser(User users)
    {
        NavigationManager.NavigateTo($"/UserEdit/{users.UserId}");
    }
    private void UserDetails(User users)
    {
        NavigationManager.NavigateTo($"/UserDetails/{users.UserId}");
    }
    private async Task DeleteUser(User user)
    {
        var confirmed = await ShowDeleteConfirmationDialog("Are you sure you want to delete this user?");
        if (confirmed)
        {
            await UserRepository.DeleteAsync(user);
            await OnInitializedAsync();
        }
    }
    private async Task<bool> ShowDeleteConfirmationDialog(string message)
    {
        return await JSRuntime.InvokeAsync<bool>("confirm", message);
    }
}
