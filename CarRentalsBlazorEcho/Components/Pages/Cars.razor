@page "/Cars"
@using CarRentalsBlazorEcho.Models
@using CarRentalsBlazorEcho.Data
@inject NavigationManager NavigationManager
@inject ICar _carRep
@inject ICarCategory _categoryRep
@inject IJSRuntime JSRuntime
@rendermode InteractiveAuto

<h3>Cars</h3>

<button @onclick="GoToAddCarPage">Add New Car</button>
<button @onclick="GoToCarsToPrepPage">Cars to Prep</button>
<button @onclick="GoToAvailableCarsPage">Available Cars</button>
@if(carCategories != null)
{
    <div>
        <label for="categoryFilter">Filter by Car Category:</label>
        <select id="categoryFilter" @onchange="async e => await FilterByCategory(e)">
            <option value="">All</option>
            @foreach (var category in carCategories)
            {
                <option value="@category.Id">@category.CategoryName</option>
            }
        </select>
    </div>
}

@if (filteredCars != null && filteredCars.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Brand</th>
                <th>Model</th>
                <th>Price</th>
                <th>Available</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var car in filteredCars)
            {
                <tr>
                    <td>@car.CarId</td>
                    <td>@car.Brand</td>
                    <td>@car.Model</td>
                    <td>@car.Price</td>
                    <td>@car.Available</td>
                    <td>
                        <button @onclick="() => CarDetails(car)">Details</button>
                        <button @onclick="() => EditCar(car)">Edit</button>
                        <button @onclick="() => DeleteCar(car)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No Cars found</p>
}

@code {
    List<Car> cars;
    List<CarCategory> carCategories;
    List<Car> filteredCars;
    int? selectedCategory;

    protected override async Task OnInitializedAsync()
    {
        cars = (await _carRep.GetAllAsync()).ToList();
        carCategories = (await _categoryRep.GetAllAsync()).ToList();

        if (carCategories == null)
        {
            carCategories = new List<CarCategory>();
        }

        filteredCars = cars;
    }

    private void GoToAddCarPage()
    {
        NavigationManager.NavigateTo("AddCar");
    }
    private void GoToCarsToPrepPage()
    {
        NavigationManager.NavigateTo("CarsToPrep");
    }
    private void GoToAvailableCarsPage()
    {
        NavigationManager.NavigateTo("AvailableCars");
    }

    private async Task DeleteCar(Car car)
    {
        var confirmed = await ShowDeleteConfirmationDialog("Are you sure you want to delete this car?");
        if (confirmed)
        {
            await _carRep.DeleteAsync(car);
            cars.Remove(car);
            filteredCars.Remove(car);
        }
    }

    private async Task<bool> ShowDeleteConfirmationDialog(string message)
    {
        return await JSRuntime.InvokeAsync<bool>("confirm", message);
    }

    private void EditCar(Car car)
    {
        NavigationManager.NavigateTo($"/EditCar/{car.CarId}");
    }

    private void CarDetails(Car car)
    {
        NavigationManager.NavigateTo($"/CarDetails/{car.CarId}");
    }

    private async Task FilterByCategory(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int categoryId))
        {
            if (categoryId > 0)
            {
                filteredCars = (await _carRep.GetByCategoryAsync(categoryId)).ToList();
            }
            else
            {
                filteredCars = cars;
            }
        }
        else
        {
            filteredCars = cars;
        }
    }
}