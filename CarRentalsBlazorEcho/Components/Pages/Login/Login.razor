@page "/Login"

@using CarRentalsBlazorEcho.Models
@using CarRentalsBlazorEcho.Models.ViewModels
@using CarRentalsBlazorEcho.Data
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@* @inject IUser userRep; *@
@inject ApplicationDbContext context;
@inject NavigationManager navigationManager 


<div>
    <EditForm Model="Model" OnValidSubmit="Autenticate" FormName="LoginForm">
        <DataAnnotationsValidator />
        <div>
            <h3>LOGIN</h3>
        </div>
        <div>
            <label>Email</label>
            <InputText @bind-Value="Model.Email" class="form-control" placeholder="EmailAdress" />
            <ValidationMessage For="() => Model.Email "/>
        </div>
        <div>
            <label>Password</label>
            <InputText @bind-Value="Model.Password" placeholder="Password" type="password" class="form-control" />
            <ValidationMessage For="() => Model.Password" />
        </div>
        <div>
            <span class="text-danger"></span>
        </div>
        <div>
            <button type="submit" class="btn btn-primary">Login</button>
        </div>
    </EditForm>
</div>

@code {

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task Autenticate()
    {
        var userAcc = context.Users.Where(x => x.Email == Model.Email).FirstOrDefault();
        if (userAcc is null || userAcc.Password != Model.Password)
        {
            errorMessage = "invalid User Name or Password";
            return;
        }
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Email, Model.Email),
            new Claim(ClaimTypes.Role, userAcc.Role)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
    }
}
