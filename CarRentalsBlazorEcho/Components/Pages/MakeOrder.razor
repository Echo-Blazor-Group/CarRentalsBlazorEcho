@page "/MakeOrder/{carId:int}"
@using CarRentalsBlazorEcho.Data
@using CarRentalsBlazorEcho.Models
@inject IUser UserRepository
@inject IOrder OrderRepository
@inject ICar CarRepository
@inject NavigationManager NavigationManager
@rendermode InteractiveAuto

<h3>Make Order</h3>

@if (newOrder != null && users != null)
{
    <form @onsubmit="CreateOrder">
        <div class="form-group">
            <label for="startDate">Start Date:</label>
            <input type="date" id="startDate" @bind="newOrder.StartDate" class="form-control" />
        </div>
        <div class="form-group">
            <label for="endDate">End Date:</label>
            <input type="date" id="endDate" @bind="newOrder.EndDate" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">Create</button>
    </form>
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter]
    public int carId { get; set; }
    public int userId { get; set; }
    private IEnumerable<User>? users;

    private Order newOrder = new Order();


    protected override async Task OnInitializedAsync()
    {
        if (!CurrentUser.IsLoggedIn)
        {
            NavigationManager.NavigateTo("/Loggin");
        }

        users = await UserRepository.GetAllAsync();

        newOrder.StartDate = DateTime.Now.Date;
        newOrder.EndDate = DateTime.Now.Date.AddDays(1);
    }


    private async Task CreateOrder()
    {
        newOrder.CarId = carId;
        newOrder.UserId = GetUserId(CurrentUser.Email);

        await OrderRepository.AddAsync(newOrder);
        NavigationManager.NavigateTo("/Orders");        


    }

    private int GetUserId(string email)
    {
        if(users != null)
        {
            User? user = users.FirstOrDefault(u => u.Email == email);

            if(user != null)
            {
                return user.UserId;
            }
            else
            {
                return -1;
            }
        }
        else
        {
            return -1;
        }
    }
}
