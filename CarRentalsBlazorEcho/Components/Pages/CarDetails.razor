@page "/CarDetails/{carId}"
@using CarRentalsBlazorEcho.Models
@using CarRentalsBlazorEcho.Data
@rendermode InteractiveAuto
@inject ICar _carRep
@inject ICarPicture _carPictureRep
@inject ICarCategory _categoryRep
@inject NavigationManager NavigationManager

<h3>Car Details</h3>

@if (car != null)
{
    <div>
        <p><strong>Brand:</strong> @car.Brand</p>
        <p><strong>Model:</strong> @car.Model</p>
        <p><strong>Price:</strong> @car.Price</p>
        <p><strong>Car Category:</strong> @categoryName</p>
        <p><strong>Available:</strong> @car.Available</p>
        <p><strong>Pictures:</strong></p>
    </div>
    <table class="table">
        <tbody>
            @if(carPictures is not null && carPictures.Any())
            {
                @foreach (var item in carPictures)
                {
                    <tr>
                        <td>
                            <img src=@item.PictureUrl width="500px" />
                            @if (CurrentUser.IsAdmin)
                            {
                                <button @onclick="() => DeletePicture(item)">Delete</button>
                            }
                            <br>
                        </td>
                    </tr>
                }
            } 
            else
            {
                <p>No pictures found.</p>
            }
        </tbody>
    </table>
    <button class="btn btn-outline-primary" @onclick="NavigateToCars">Return To List</button>
}
else
{
    <p>Loading...</p>
}

@code {
    Car car;
    List<CarPicture>? carPictures;
    [Parameter]
    public string CarId { get; set; }
    private string categoryName;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(CarId) && int.TryParse(CarId, out int id))
        {
            car = await _carRep.GetByIdAsync(id);
            carPictures = (await _carPictureRep.GetAllByCarIdAsync(id)).ToList();

            var category = await _categoryRep.GetByIdAsync(car.CarCategoryId);
            categoryName = category?.CategoryName ?? "No Category";
        }
    }

    private async Task DeletePicture(CarPicture picture)
    {
        await _carPictureRep.DeleteAsync(picture);
        NavigationManager.NavigateTo($"/CarDetails/{CarId}", true);
    }

    private void NavigateToCars()
    {
        NavigationManager.NavigateTo("/Cars");
    }
}